{"version":3,"file":"react-native-value-range-selector.cjs.production.min.js","sources":["../src/Trimmer/Marker.tsx","../src/Trimmer/Indicator.tsx","../src/Trimmer/Track.tsx","../src/Trimmer/styleConstants.tsx","../src/Trimmer/index.tsx"],"sourcesContent":["import React, {useMemo} from 'react';\nimport {View, ViewStyle} from 'react-native';\nimport {Gesture, GestureDetector} from 'react-native-gesture-handler';\nimport {interpolate, runOnJS, useSharedValue} from 'react-native-reanimated';\n\ninterface MarkerProps {\n  position: Position;\n  startPx: number; // current start marker X position in px\n  endPx: number; // current end marker X position in px\n  gapPx: number; // gap between markers in px\n  min: number; // users units e.g. 0-1000\n  max: number; // users units e.g. 0-1000\n  trackWidth: number;\n  trackHeight: number;\n  markerSize: number;\n  borderWidth: number;\n  onChange?: (start: number, end: number) => void;\n  markerColor: string;\n  renderCustomMarker?: (position: Position) => React.ReactNode;\n}\n\nexport const Marker = ({\n  startPx,\n  endPx,\n  trackWidth,\n  position,\n  markerSize,\n  borderWidth,\n  trackHeight,\n  gapPx,\n  onChange,\n  min,\n  max,\n  markerColor,\n  renderCustomMarker,\n}: MarkerProps) => {\n  const startX = useSharedValue(position === 'left' ? startPx : endPx);\n\n  const markerStyle = useMemo(() => {\n    return getMarkerStyle({\n      position: position,\n      trackHeight,\n      markerSize,\n      borderWidth,\n      markerColor,\n    });\n  }, [borderWidth, markerColor, markerSize, position, trackHeight]);\n\n  function onUpdate(translationX: number) {\n    'worklet';\n\n    const newOffsetX = startX.value + translationX;\n\n    const minValue = position === 'left' ? 0 : startPx + gapPx;\n    const maxValue = position === 'left' ? endPx - gapPx : trackWidth;\n\n    const clampX = Math.min(Math.max(newOffsetX, minValue), maxValue);\n\n    function getInterpolatedValue(value: number) {\n      return interpolate(value, [0, trackWidth], [min, max]);\n    }\n\n    if (!onChange) {\n      return;\n    }\n    if (position === 'left') {\n      runOnJS(onChange)(\n        getInterpolatedValue(clampX),\n        getInterpolatedValue(endPx),\n      );\n    } else {\n      runOnJS(onChange)(\n        getInterpolatedValue(startPx),\n        getInterpolatedValue(clampX),\n      );\n    }\n  }\n\n  function onEnd() {\n    'worklet';\n\n    startX.value = position === 'left' ? startPx : endPx;\n  }\n\n  const gesture = Gesture.Pan()\n    .minDistance(0)\n    .onUpdate(e => {\n      onUpdate(e.translationX);\n    })\n    .onEnd(onEnd);\n\n  const customMarkerContainerStyle = getCustomMarkerContainerStyle(position);\n\n  return (\n    <GestureDetector gesture={gesture}>\n      {renderCustomMarker ? (\n        <View style={customMarkerContainerStyle}>\n          {renderCustomMarker(position)}\n        </View>\n      ) : (\n        <View style={markerStyle} />\n      )}\n    </GestureDetector>\n  );\n};\n\nexport type Position = 'left' | 'right';\n\nconst getCustomMarkerContainerStyle = (position: Position): ViewStyle => {\n  return position === 'left'\n    ? {\n        position: 'absolute',\n        left: 0,\n      }\n    : {\n        position: 'absolute',\n        right: 0,\n      };\n};\n\nconst getMarkerStyle = ({\n  position,\n  markerSize,\n  borderWidth,\n  trackHeight,\n  markerColor,\n}: {\n  position: Position;\n  markerSize: number;\n  borderWidth: number;\n  trackHeight: number;\n  markerColor: string;\n}): ViewStyle => {\n  const sharedStyle: ViewStyle = {\n    position: 'absolute',\n    backgroundColor: markerColor,\n    top: (trackHeight - 2 * borderWidth - markerSize) / 2,\n    width: markerSize,\n    height: markerSize,\n    borderRadius: markerSize / 2,\n  };\n\n  return position === 'left'\n    ? {\n        ...sharedStyle,\n        left: -((markerSize + borderWidth) / 2),\n      }\n    : {\n        ...sharedStyle,\n        right: -((markerSize + borderWidth) / 2),\n      };\n};\n","import React, {useMemo} from 'react';\nimport {StyleSheet, View, ViewStyle} from 'react-native';\n\nimport {GestureHandlerRootView} from 'react-native-gesture-handler';\nimport Animated, {Extrapolate, interpolate} from 'react-native-reanimated';\nimport {Marker, Position} from './Marker';\n\ninterface IndicatorProp {\n  trackHeight: number;\n  trackWidth: number;\n  markerSize: number;\n  borderWidth: number;\n  onChange?: (start: number, end: number) => void;\n  gapPx: number;\n  startValue: number;\n  endValue: number;\n  min: number;\n  max: number;\n  indicatorColor: string;\n  markerColor: string;\n  backdropColor: string;\n  renderCustomMarker?: (position: Position) => React.ReactNode;\n}\n\nexport const Indicator = ({\n  trackHeight,\n  trackWidth,\n  markerSize,\n  borderWidth,\n  onChange,\n  gapPx,\n  startValue,\n  endValue,\n  min,\n  max,\n  indicatorColor,\n  markerColor,\n  backdropColor,\n  renderCustomMarker,\n}: IndicatorProp) => {\n  const startPx = interpolate(startValue, [min, max], [0, trackWidth], {\n    extrapolateLeft: Extrapolate.CLAMP,\n    extrapolateRight: Extrapolate.CLAMP,\n  });\n  const endPx = interpolate(endValue, [min, max], [0, trackWidth], {\n    extrapolateLeft: Extrapolate.CLAMP,\n    extrapolateRight: Extrapolate.CLAMP,\n  });\n\n  const indicatorStyle: ViewStyle = {\n    position: 'absolute',\n    left: startPx,\n    right: trackWidth - endPx,\n    height: trackHeight,\n    backgroundColor: 'transparent',\n    borderColor: indicatorColor,\n    borderWidth: borderWidth,\n  };\n\n  const startBackdropViewStyle: ViewStyle = useMemo(\n    () => ({\n      backgroundColor: backdropColor,\n      width: startPx,\n      height: '100%',\n    }),\n    [backdropColor, startPx],\n  );\n  const endBackdropViewStyle: ViewStyle = useMemo(\n    () => ({\n      backgroundColor: backdropColor,\n      width: trackWidth - endPx,\n      position: 'absolute',\n      left: endPx,\n      height: '100%',\n      zIndex: -1,\n    }),\n    [backdropColor, endPx, trackWidth],\n  );\n\n  return (\n    <GestureHandlerRootView style={S.flex}>\n      <View style={startBackdropViewStyle} />\n      <Animated.View style={indicatorStyle}>\n        <Marker\n          position=\"left\"\n          startPx={startPx}\n          endPx={endPx}\n          trackWidth={trackWidth}\n          trackHeight={trackHeight}\n          borderWidth={borderWidth}\n          markerSize={markerSize}\n          onChange={onChange}\n          gapPx={gapPx}\n          min={min}\n          max={max}\n          markerColor={markerColor}\n          renderCustomMarker={renderCustomMarker}\n        />\n        <Marker\n          position=\"right\"\n          startPx={startPx}\n          endPx={endPx}\n          trackWidth={trackWidth}\n          trackHeight={trackHeight}\n          borderWidth={borderWidth}\n          markerSize={markerSize}\n          onChange={onChange}\n          gapPx={gapPx}\n          min={min}\n          max={max}\n          markerColor={markerColor}\n          renderCustomMarker={renderCustomMarker}\n        />\n      </Animated.View>\n\n      <View style={endBackdropViewStyle} />\n    </GestureHandlerRootView>\n  );\n};\n\nconst S = StyleSheet.create({\n  flex: {flex: 1, flexDirection: 'row'},\n});\n","import React, {PropsWithChildren, useMemo, useState} from 'react';\nimport {\n  Image,\n  ImageSourcePropType,\n  ImageStyle,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport {colors} from './styleConstants';\n\ninterface TrackProps {\n  height: number;\n  renderIndicator: (trackWidth: number) => JSX.Element;\n  trackColor?: string;\n  imageBackgroundSource?: ImageSourcePropType;\n  imageStyle?: StyleProp<ImageStyle>;\n}\n\nexport const Track = ({\n  renderIndicator,\n  height,\n  trackColor,\n  imageBackgroundSource,\n  imageStyle,\n}: PropsWithChildren<TrackProps>) => {\n  const [trackWidth, setTrackWidth] = useState(0);\n\n  const style: ViewStyle = useMemo(() => {\n    return {\n      backgroundColor: imageBackgroundSource ? colors.transparent : trackColor,\n      flexDirection: 'row',\n      height,\n    };\n  }, [height, imageBackgroundSource, trackColor]);\n\n  return (\n    <View>\n      <View\n        onLayout={event => {\n          try {\n            const width = event.nativeEvent.layout.width;\n            setTrackWidth(width);\n          } catch (error) {\n            console.log('Error in onLayout', String(error));\n          }\n        }}\n        style={style}>\n        {trackWidth !== 0 && renderIndicator(trackWidth)}\n      </View>\n      {imageBackgroundSource && (\n        <View style={S.imageContainer}>\n          <Image\n            source={imageBackgroundSource}\n            style={imageStyle ? imageStyle : S.image}\n          />\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst S = StyleSheet.create({\n  imageContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: -100,\n  },\n  image: {width: '100%', height: '100%', resizeMode: 'repeat'},\n});\n","export const colors = {\n  indicator: '#262626',\n  track: '#f39c12',\n  marker: '#262626',\n  backdrop: 'rgba(0,0,0,0.3)',\n  transparent: 'transparent',\n};\n","import React from 'react';\n\nimport {Indicator} from './Indicator';\nimport {Track} from './Track';\nimport {colors} from './styleConstants';\nimport {ImageSourcePropType, ImageStyle, StyleProp} from 'react-native';\nimport {Position} from './Marker';\n\ninterface TrimmerProps {\n  startValue: number;\n  endValue: number;\n  height?: number;\n  markerSize?: number;\n  borderWidth?: number;\n  onChange?: (start: number, end: number) => void;\n  gapPx?: number;\n  min: number;\n  max: number;\n  trackColor?: string;\n  indicatorColor?: string;\n  markerColor?: string;\n  backdropColor?: string;\n  imageBackgroundSource?: ImageSourcePropType;\n  imageStyle?: StyleProp<ImageStyle>;\n  renderCustomMarker?: (position: Position) => React.ReactNode;\n}\n\nexport const Trimmer = ({\n  startValue,\n  endValue,\n  height = 50,\n  markerSize = 24,\n  borderWidth = 2,\n  onChange,\n  gapPx = 0,\n  min,\n  max,\n  trackColor = colors.track,\n  indicatorColor = colors.indicator,\n  markerColor = colors.marker,\n  backdropColor = colors.backdrop,\n  imageBackgroundSource,\n  imageStyle,\n  renderCustomMarker,\n}: TrimmerProps) => {\n  return (\n    <Track\n      trackColor={trackColor}\n      imageBackgroundSource={imageBackgroundSource}\n      imageStyle={imageStyle}\n      height={height}\n      renderIndicator={(trackWidth: number) => {\n        return (\n          <Indicator\n            backdropColor={backdropColor}\n            markerColor={markerColor}\n            indicatorColor={indicatorColor}\n            startValue={startValue}\n            endValue={endValue}\n            trackHeight={height}\n            trackWidth={trackWidth}\n            markerSize={markerSize}\n            borderWidth={borderWidth}\n            onChange={onChange}\n            gapPx={gapPx}\n            min={min}\n            max={max}\n            renderCustomMarker={renderCustomMarker}\n          />\n        );\n      }}\n    />\n  );\n};\n"],"names":["Marker","_ref","startPx","endPx","trackWidth","position","markerSize","borderWidth","trackHeight","gapPx","onChange","min","max","markerColor","renderCustomMarker","startX","useSharedValue","markerStyle","useMemo","getMarkerStyle","gesture","Gesture","Pan","minDistance","onUpdate","e","translationX","maxValue","clampX","Math","value","getInterpolatedValue","interpolate","runOnJS","onEnd","customMarkerContainerStyle","getCustomMarkerContainerStyle","React","GestureDetector","View","style","left","right","_ref2","_extends","backgroundColor","top","width","height","borderRadius","Indicator","endValue","indicatorColor","backdropColor","startValue","extrapolateLeft","Extrapolate","CLAMP","extrapolateRight","indicatorStyle","borderColor","startBackdropViewStyle","endBackdropViewStyle","zIndex","GestureHandlerRootView","S","flex","Animated","StyleSheet","create","flexDirection","Track","renderIndicator","trackColor","imageBackgroundSource","imageStyle","_useState","useState","setTrackWidth","onLayout","event","nativeEvent","layout","error","console","log","String","imageContainer","Image","source","image","absoluteFillObject","resizeMode","_ref$height","_ref$markerSize","_ref$borderWidth","_ref$gapPx","_ref$trackColor","_ref$indicatorColor","_ref$markerColor","_ref$backdropColor"],"mappings":"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"}